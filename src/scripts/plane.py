#-- coding:UTF-8 --
#空间平面的方程:z = ax + by + c
#目标：求解a,b,c的值
#已知条件：被测点的三维坐标
import numpy as np
# p=[
#   [0,0,3.52],
#    [1,0,2.3],
#    [2,0,-2.69],
#    [0,1,-2.65],
#    [1,1,3.25],
#    [2,1,4.36],
#    [0,2,-2.36],
#    [1,2,4.56],
#    [2,2,-3.54],
#    [0,3,2.36],
#    [1,3,-5.65],
#    [2,3,2.59]
#    ]
p = [
  [-1.19889,-1.1925,2.7875],
  [-0.564308,-1.1875,2.8675],
  [-1.3175,-0.7925,2.83191],
  [-0.4875,-0.8325,2.931537],
  [-1.1675,-0.5775,2.879342],
  [-0.514503,-0.6225,2.9525]
]
# p = [
#   [0.2225,-0.7025,2.862062],
#   [0.8425,-0.7175,2.840159],
#   [0.1825,-0.4625,2.86034],
#   [0.9725,-0.5616,2.8275],
#   [0.2725,-0.1775,2.8373],
#   [1.0275,-0.1787,2.8075]
# ]
n = len(p)
B=[0,0,0]
A = np.zeros((3,3),np.float32)
for i in range(n):
    B[0] = B[0] + p[i][0]*p[i][2]
    B[1] = B[1] + p[i][1]*p[i][2]
    B[2] = B[2] + p[i][2]
    A[0][0] = A[0][0] + p[i][0]**2
    A[0][1] = A[0][1] + p[i][0]*p[i][1]
    A[0][2] = A[0][2] + p[i][0]
    A[1][0] = A[0][1]
    A[1][1] = A[1][1] + p[i][1]**2
    A[1][2] = A[1][2] + p[i][1]
    A[2][0] = A[0][2]
    A[2][1] = A[1][2]
    A[2][2] = n
# 【1】计算拟合平面的系数a,b,c
x = np.matmul(np.linalg.inv(A),B)
print(B)
print(A)
print(x)

# 【2】计算平面度
# 计算被一个被测点的实际高度Z与理想高度Zs之间的差值
# 平面度的值即为被测点最大差值与最小差值的差
delta = np.zeros((n,),np.float32)
for i in range(n):
    delta[i] = p[i][2] - (x[0]*p[i][0]+x[1]*p[i][1]+x[2])
print(delta)
flatness = max(delta) - min(delta)
print(flatness)

absDelta= np.zeros((n,),np.float32)
for i in range(n):
    absDelta[i] = abs(p[i][2] - (x[0]*p[i][0]+x[1]*p[i][1]+x[2]))
print(absDelta)
averageDelta = np.mean(absDelta)
print(averageDelta)
